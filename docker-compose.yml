version: "3.7"

volumes:
  kong_data: {}
  auth_data: {}
  inventory_data: {}

networks:
 kong-net:
  name: kong-net
  driver: bridge
  ipam:
    config:
      - subnet: 172.1.1.0/24

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    container_name: kong-postgres
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      # POSTGRES_PASSWORD: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    build:
      context: ./config
      dockerfile: Dockerfile
    command: kong migrations bootstrap
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    build:
      context: ./config
      dockerfile: Dockerfile
    container_name: kong
    restart: on-failure
    networks:
       kong-net:
        ipv4_address: 172.1.1.40
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl # to secure the admin API comment this line. it is not recommended to expose the admin API from localhost or outside the cluster
      KONG_PLUGINSERVER_NAMES: js
      KONG_PLUGINSERVER_JS_SOCKET: /usr/local/kong/js_pluginserver.sock
      KONG_PLUGINSERVER_JS_START_CMD: /usr/local/bin/kong-js-pluginserver -v --plugins-directory /usr/local/kong/js-plugins 
      KONG_PLUGINSERVER_JS_QUERY_CMD: /usr/local/bin/kong-js-pluginserver --plugins-directory /usr/local/kong/js-plugins --dump-all-plugins 
      KONG_PLUGINS: bundled,custom-auth

      
    depends_on:
      - kong-database
      - kong-migration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
        - kong-net   
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:kong@kong-database:5432/konga
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"



# Auth Service and postgress database ------------------------------
  auth-db:
    image: postgres:9.6
    container_name: auth-db
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - auth_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: auth
      POSTGRES_DB: auth
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "auth"]
      interval: 30s
      timeout: 30s
      retries: 3

  auth-prepare:
    build:
      context: ./auth
      dockerfile: Dockerfile   
    command: npx prisma migrate dev --name init
    environment:
      DATABASE_URL: postgresql://auth:auth@host.docker.internal:5433/auth?schema=public
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - auth-db

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    image: auth
    container_name: auth
    restart: on-failure
    ports: 
      - "4005:4005"
    environment:
      DATABASE_URL: postgresql://auth:auth@host.docker.internal:5433/auth?schema=public
    depends_on:
      - auth-db
      - auth-prepare
    volumes:
      - ./auth:/app
      - /app/node_modules
    networks:
      kong-net:
        ipv4_address: 172.1.1.15
  



# Inventory Service and postgress database ------------------------------
  inventory-db:
    image: postgres:9.6
    container_name: inventory-db
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - inventory_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory
      POSTGRES_DB: inventory
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "auth"]
      interval: 30s
      timeout: 30s
      retries: 3

  inventory-prepare:
    build:
      context: ./inventory
      dockerfile: Dockerfile   
    command: npx prisma migrate dev --name init
    environment:
      DATABASE_URL: postgresql://inventory:inventory@host.docker.internal:5434/inventory?schema=public
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - inventory-db

  inventory:
    build:
      context: ./inventory
      dockerfile: Dockerfile
    image: inventory
    container_name: inventory
    restart: on-failure
    ports: 
      - "4001:4001"
    environment:
      DATABASE_URL: postgresql://inventory:inventory@host.docker.internal:5434/inventory?schema=public
    depends_on:
      - inventory-db
      - inventory-prepare
    volumes:
      - ./inventory:/app
      - /app/node_modules
    networks:
      kong-net:
        ipv4_address: 172.1.1.16
  
